apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: advanced-crop-classification-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.10, pipelines.kubeflow.org/pipeline_compilation_time: '2022-01-17T10:05:36.490541',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Classify crops extracted
      from RPG.", "inputs": [{"name": "json_img", "type": "String"}, {"name": "shp",
      "type": "String"}, {"default": "False", "name": "cross_validation", "optional":
      true, "type": "Boolean"}, {"default": "2", "name": "iterations", "optional":
      true, "type": "Integer"}, {"default": "2", "name": "cv", "optional": true, "type":
      "Integer"}], "name": "advanced-crop-classification-pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.10}
spec:
  entrypoint: advanced-crop-classification-pipeline
  templates:
  - name: advanced-crop-classification-pipeline
    inputs:
      parameters:
      - {name: cross_validation}
      - {name: cv}
      - {name: iterations}
      - {name: json_img}
      - {name: shp}
    dag:
      tasks:
      - name: compare-models
        template: compare-models
        dependencies: [lstm-classifier-and-tuning, xgboost-classifier-and-tuning]
        arguments:
          artifacts:
          - {name: lstm-classifier-and-tuning-Report, from: '{{tasks.lstm-classifier-and-tuning.outputs.artifacts.lstm-classifier-and-tuning-Report}}'}
          - {name: xgboost-classifier-and-tuning-Report, from: '{{tasks.xgboost-classifier-and-tuning.outputs.artifacts.xgboost-classifier-and-tuning-Report}}'}
      - name: construct-ndvi-temporal-stats
        template: construct-ndvi-temporal-stats
        dependencies: [download-sentinel-2-images]
        arguments:
          artifacts:
          - {name: download-sentinel-2-images-Data, from: '{{tasks.download-sentinel-2-images.outputs.artifacts.download-sentinel-2-images-Data}}'}
      - name: download-sentinel-2-images
        template: download-sentinel-2-images
        arguments:
          parameters:
          - {name: json_img, value: '{{inputs.parameters.json_img}}'}
          - {name: shp, value: '{{inputs.parameters.shp}}'}
      - name: lstm-classifier-and-tuning
        template: lstm-classifier-and-tuning
        dependencies: [preprare-crop-classification-data]
        arguments:
          parameters:
          - {name: cross_validation, value: '{{inputs.parameters.cross_validation}}'}
          - {name: cv, value: '{{inputs.parameters.cv}}'}
          - {name: iterations, value: '{{inputs.parameters.iterations}}'}
          artifacts:
          - {name: preprare-crop-classification-data-Data, from: '{{tasks.preprare-crop-classification-data.outputs.artifacts.preprare-crop-classification-data-Data}}'}
      - name: preprare-crop-classification-data
        template: preprare-crop-classification-data
        dependencies: [construct-ndvi-temporal-stats]
        arguments:
          artifacts:
          - {name: construct-ndvi-temporal-stats-Data, from: '{{tasks.construct-ndvi-temporal-stats.outputs.artifacts.construct-ndvi-temporal-stats-Data}}'}
      - name: xgboost-classifier-and-tuning
        template: xgboost-classifier-and-tuning
        dependencies: [preprare-crop-classification-data]
        arguments:
          parameters:
          - {name: cross_validation, value: '{{inputs.parameters.cross_validation}}'}
          - {name: cv, value: '{{inputs.parameters.cv}}'}
          - {name: iterations, value: '{{inputs.parameters.iterations}}'}
          artifacts:
          - {name: preprare-crop-classification-data-Data, from: '{{tasks.preprare-crop-classification-data.outputs.artifacts.preprare-crop-classification-data-Data}}'}
  - name: compare-models
    container:
      args: [--xgboost-csv, /tmp/inputs/xgboost_csv/data, --lstm-csv, /tmp/inputs/lstm_csv/data,
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'pandas==0.24' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'pandas==0.24' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def compare_models(xgboost_csv, lstm_csv):
            import pandas as pd
            xgb_df = pd.read_csv(xgboost_csv)
            xgb_acc = xgb_df['precision'][2]

            lstm_df = pd.read_csv(lstm_csv)
            lstm_acc = lstm_df['precision'][2]

            if xgb_acc>=lstm_acc:
                print ("XGBoost model will be used for serving")
                return "XGB"
            else:
                print ("LSTM will be used for serving")
                return "LSTM"

        def _serialize_str(str_value: str) -> str:
            if not isinstance(str_value, str):
                raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                    str(str_value), str(type(str_value))))
            return str_value

        import argparse
        _parser = argparse.ArgumentParser(prog='Compare models', description='')
        _parser.add_argument("--xgboost-csv", dest="xgboost_csv", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--lstm-csv", dest="lstm_csv", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = compare_models(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_str,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      artifacts:
      - {name: lstm-classifier-and-tuning-Report, path: /tmp/inputs/lstm_csv/data}
      - {name: xgboost-classifier-and-tuning-Report, path: /tmp/inputs/xgboost_csv/data}
    outputs:
      artifacts:
      - {name: compare-models-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.10
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--xgboost-csv", {"inputPath": "xgboost_csv"}, "--lstm-csv", {"inputPath":
          "lstm_csv"}, "----output-paths", {"outputPath": "Output"}], "command": ["sh",
          "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
          ''pandas==0.24'' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
          --quiet --no-warn-script-location ''pandas==0.24'' --user) && \"$0\" \"$@\"",
          "sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def compare_models(xgboost_csv, lstm_csv):\n    import
          pandas as pd\n    xgb_df = pd.read_csv(xgboost_csv)\n    xgb_acc = xgb_df[''precision''][2]\n\n    lstm_df
          = pd.read_csv(lstm_csv)\n    lstm_acc = lstm_df[''precision''][2]\n\n    if
          xgb_acc>=lstm_acc:\n        print (\"XGBoost model will be used for serving\")\n        return
          \"XGB\"\n    else:\n        print (\"LSTM will be used for serving\")\n        return
          \"LSTM\"\n\ndef _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value,
          str):\n        raise TypeError(''Value \"{}\" has type \"{}\" instead of
          str.''.format(\n            str(str_value), str(type(str_value))))\n    return
          str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Compare
          models'', description='''')\n_parser.add_argument(\"--xgboost-csv\", dest=\"xgboost_csv\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--lstm-csv\",
          dest=\"lstm_csv\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = compare_models(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "xgboost_csv", "type": "String"},
          {"name": "lstm_csv", "type": "String"}], "name": "Compare models", "outputs":
          [{"name": "Output", "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/max_cache_staleness: P0D}
  - name: construct-ndvi-temporal-stats
    container:
      args: []
      command: [python3, /pipelines/components/src/temporal_stats.py, --input_path,
        /tmp/inputs/Stat/data, --output_path, /tmp/outputs/Data/data]
      image: albughdadim/kf-pipeline3-construct-temporal-stats:latest
    inputs:
      artifacts:
      - {name: download-sentinel-2-images-Data, path: /tmp/inputs/Stat/data}
    outputs:
      artifacts:
      - {name: construct-ndvi-temporal-stats-Data, path: /tmp/outputs/Data/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.10
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Build
          temporal series of median NDVI", "implementation": {"container": {"command":
          ["python3", "/pipelines/components/src/temporal_stats.py", "--input_path",
          {"inputPath": "Stat"}, "--output_path", {"outputPath": "Data"}], "image":
          "albughdadim/kf-pipeline3-construct-temporal-stats:latest"}}, "inputs":
          [{"description": "Input path that contains image stats", "name": "Stat",
          "type": "String"}], "name": "Construct NDVI Temporal Stats", "outputs":
          [{"description": "Output path to temporal stats", "name": "Data", "type":
          "String"}]}', pipelines.kubeflow.org/component_ref: '{"digest": "db8cece3afdf9ae51794863846fc815456deb163962d6823da82cbab833fecbd",
          "url": "temporal_stats/temporal_stats.yaml"}'}
  - name: download-sentinel-2-images
    container:
      args: []
      command: [python3, /pipelines/components/src/process_img.py, --json_data, '{{inputs.parameters.json_img}}',
        --shp_fname, '{{inputs.parameters.shp}}', --output_path, /tmp/outputs/Data/data]
      image: albughdadim/kf-pipeline3-process-img:latest
    inputs:
      parameters:
      - {name: json_img}
      - {name: shp}
    outputs:
      artifacts:
      - {name: download-sentinel-2-images-Data, path: /tmp/outputs/Data/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.10
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Download
          Sentinel-2 images and calculate stats using a shapefile of crops from the
          RPG", "implementation": {"container": {"command": ["python3", "/pipelines/components/src/process_img.py",
          "--json_data", {"inputValue": "Json"}, "--shp_fname", {"inputValue": "Shp"},
          "--output_path", {"outputPath": "Data"}], "image": "albughdadim/kf-pipeline3-process-img:latest"}},
          "inputs": [{"description": "URL of Sentinel-2 Json to be downloaded", "name":
          "Json", "type": "String"}, {"description": "URL of the shapefile to be used
          for stats without the extension", "name": "Shp", "type": "String"}], "name":
          "Download Sentinel-2 Images", "outputs": [{"description": "Output path to
          store stats from images", "name": "Data", "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "a3cb291b979673788b17c4576af05e84da6aad3475ed79c4466bc86b0c4d2225", "url":
          "process_img/process_img.yaml"}', pipelines.kubeflow.org/arguments.parameters: '{"Json":
          "{{inputs.parameters.json_img}}", "Shp": "{{inputs.parameters.shp}}"}'}
  - name: lstm-classifier-and-tuning
    container:
      args: []
      command: [python3, /pipelines/components/src/lstm.py, --input_path, /tmp/inputs/Data/data,
        --cross_validation, '{{inputs.parameters.cross_validation}}', --iterations,
        '{{inputs.parameters.iterations}}', --cv, '{{inputs.parameters.cv}}', --model_output_path,
        /tmp/outputs/Model/data, --report_output_path, /tmp/outputs/Report/data, --metadata_output_path,
        /tmp/outputs/mlpipeline-ui-metadata/data, --metric_output_path, /tmp/outputs/mlpipeline-metrics/data]
      image: albughdadim/kf-pipeline3-lstm:latest
    inputs:
      parameters:
      - {name: cross_validation}
      - {name: cv}
      - {name: iterations}
      artifacts:
      - {name: preprare-crop-classification-data-Data, path: /tmp/inputs/Data/data}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /tmp/outputs/mlpipeline-ui-metadata/data}
      - {name: mlpipeline-metrics, path: /tmp/outputs/mlpipeline-metrics/data}
      - {name: lstm-classifier-and-tuning-Model, path: /tmp/outputs/Model/data}
      - {name: lstm-classifier-and-tuning-Report, path: /tmp/outputs/Report/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.10
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Classify
          dataset using LSTM with randomsearch for hyperparameter tuning", "implementation":
          {"container": {"command": ["python3", "/pipelines/components/src/lstm.py",
          "--input_path", {"inputPath": "Data"}, "--cross_validation", {"inputValue":
          "CrossValidation"}, "--iterations", {"inputValue": "Iterations"}, "--cv",
          {"inputValue": "CV"}, "--model_output_path", {"outputPath": "Model"}, "--report_output_path",
          {"outputPath": "Report"}, "--metadata_output_path", {"outputPath": "mlpipeline-ui-metadata"},
          "--metric_output_path", {"outputPath": "mlpipeline-metrics"}], "image":
          "albughdadim/kf-pipeline3-lstm:latest"}}, "inputs": [{"description": "Input
          to json file.", "name": "Data", "type": "String"}, {"description": "Cross
          validation option", "name": "CrossValidation", "type": "Boolean"}, {"description":
          "Number of search iterations", "name": "Iterations", "type": "Integer"},
          {"description": "Number of cross validation", "name": "CV", "type": "Integer"}],
          "name": "LSTM Classifier and Tuning", "outputs": [{"description": "Output
          path to store best model", "name": "Model", "type": "String"}, {"description":
          "Output path to store classification report", "name": "Report", "type":
          "String"}, {"description": "Output path to viz metadata", "name": "mlpipeline-ui-metadata",
          "type": "String"}, {"description": "Output path to metrics", "name": "mlpipeline-metrics",
          "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "99408a38db1d638f6d44a2f359d14c1117c9c25602bcd72f3dfc20e0e90b3d3d", "url":
          "lstm/lstm.yaml"}', pipelines.kubeflow.org/arguments.parameters: '{"CV":
          "{{inputs.parameters.cv}}", "CrossValidation": "{{inputs.parameters.cross_validation}}",
          "Iterations": "{{inputs.parameters.iterations}}"}'}
  - name: preprare-crop-classification-data
    container:
      args: []
      command: [python3, /pipelines/components/src/preprocess_data.py, --input_path,
        /tmp/inputs/Temporal/data, --output_path, /tmp/outputs/Data/data]
      image: albughdadim/kf-pipeline3-preprocess-data:latest
    inputs:
      artifacts:
      - {name: construct-ndvi-temporal-stats-Data, path: /tmp/inputs/Temporal/data}
    outputs:
      artifacts:
      - {name: preprare-crop-classification-data-Data, path: /tmp/outputs/Data/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.10
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Prepare
          crop data for classification including missing data", "implementation":
          {"container": {"command": ["python3", "/pipelines/components/src/preprocess_data.py",
          "--input_path", {"inputPath": "Temporal"}, "--output_path", {"outputPath":
          "Data"}], "image": "albughdadim/kf-pipeline3-preprocess-data:latest"}},
          "inputs": [{"description": "Input path that contains temporal stats", "name":
          "Temporal", "type": "String"}], "name": "Preprare Crop Classification Data",
          "outputs": [{"description": "Output path to store training json", "name":
          "Data", "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "74f74baa597cb45e00e895a99d6aeec62d9cef9c4cab9d482817757871b16e3c", "url":
          "preprocess_data/preprocess_data.yaml"}'}
  - name: xgboost-classifier-and-tuning
    container:
      args: []
      command: [python3, /pipelines/components/src/extreme_gradient_boost.py, --input_path,
        /tmp/inputs/Data/data, --cross_validation, '{{inputs.parameters.cross_validation}}',
        --iterations, '{{inputs.parameters.iterations}}', --cv, '{{inputs.parameters.cv}}',
        --model_output_path, /tmp/outputs/Model/data, --report_output_path, /tmp/outputs/Report/data,
        --metadata_output_path, /tmp/outputs/mlpipeline-ui-metadata/data, --metric_output_path,
        /tmp/outputs/mlpipeline-metrics/data]
      image: albughdadim/kf-pipeline3-xgboost:latest
    inputs:
      parameters:
      - {name: cross_validation}
      - {name: cv}
      - {name: iterations}
      artifacts:
      - {name: preprare-crop-classification-data-Data, path: /tmp/inputs/Data/data}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /tmp/outputs/mlpipeline-ui-metadata/data}
      - {name: mlpipeline-metrics, path: /tmp/outputs/mlpipeline-metrics/data}
      - {name: xgboost-classifier-and-tuning-Model, path: /tmp/outputs/Model/data}
      - {name: xgboost-classifier-and-tuning-Report, path: /tmp/outputs/Report/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.10
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Classify
          dataset using Xgboost with randomsearch for hyperparameter tuning", "implementation":
          {"container": {"command": ["python3", "/pipelines/components/src/extreme_gradient_boost.py",
          "--input_path", {"inputPath": "Data"}, "--cross_validation", {"inputValue":
          "CrossValidation"}, "--iterations", {"inputValue": "Iterations"}, "--cv",
          {"inputValue": "CV"}, "--model_output_path", {"outputPath": "Model"}, "--report_output_path",
          {"outputPath": "Report"}, "--metadata_output_path", {"outputPath": "mlpipeline-ui-metadata"},
          "--metric_output_path", {"outputPath": "mlpipeline-metrics"}], "image":
          "albughdadim/kf-pipeline3-xgboost:latest"}}, "inputs": [{"description":
          "Input to json file.", "name": "Data", "type": "String"}, {"description":
          "Cross validation option", "name": "CrossValidation", "type": "Boolean"},
          {"description": "Number of search iterations", "name": "Iterations", "type":
          "Integer"}, {"description": "Number of cross validation", "name": "CV",
          "type": "Integer"}], "name": "XGBoost Classifier and Tuning", "outputs":
          [{"description": "Output path to store best model", "name": "Model", "type":
          "String"}, {"description": "Output path to store classification report",
          "name": "Report", "type": "String"}, {"description": "Output path to viz
          metadata", "name": "mlpipeline-ui-metadata", "type": "String"}, {"description":
          "Output path to metrics", "name": "mlpipeline-metrics", "type": "String"}]}',
        pipelines.kubeflow.org/component_ref: '{"digest": "64d90c3dac73e0ed194c6ba91b7646cb0dae911784a2866a1afcbf08407b54f0",
          "url": "extreme_gradient_boost/extreme_gradient_boost.yaml"}', pipelines.kubeflow.org/arguments.parameters: '{"CV":
          "{{inputs.parameters.cv}}", "CrossValidation": "{{inputs.parameters.cross_validation}}",
          "Iterations": "{{inputs.parameters.iterations}}"}'}
  arguments:
    parameters:
    - {name: json_img}
    - {name: shp}
    - name: cross_validation
      value: "False"
    - {name: iterations, value: '2'}
    - {name: cv, value: '2'}
  serviceAccountName: pipeline-runner
